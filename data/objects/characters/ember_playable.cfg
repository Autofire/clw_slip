# Ember; main player character

{

#DEFINES#
id: "ember_playable",
prototype: ["player_controlled_platformer_character"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss"],
vehicle: false,
hitpoints: 30,
mass: 5,
is_human: true,
friction: 2200,
traction_in_air: 100,
traction_in_water: 1000,
feet_width: 5,
zorder: "@include data/zorder.cfg:player",

properties: {
	runspeed: { type: "int", default: 190 },
	airspeed: { type: "int", default: 30 },
	jump_power: { type: "int", default: -500 },
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	jumpticks: { type: "int", default: 0 },
	cycle_of_last_up: { type: "int", default: 0 },
	
	team: "'player'",
	left: -1,
	right: 1,
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",
		
		
	# -- functions -- #
	grounded_anim: "bool :: bool(self.animation in ['stand', 'run'])",
	controllable_anim: "bool :: bool(self.animation in ['stand', 'run', 'jump', 'beginFall', 'fall'])", 
	can_turn: "bool :: bool(self.animation not in ['fall', 'beginFall', 'jump'])",
	
	turn: "def(int newdir) -> commands
		if(newdir != facing and can_turn, set(facing, newdir))",
	
			# Overloading (from hittable) because we want to flinch in air #
	handle_flinch: "def(obj hittable collide_with) -> commands
			execute(me, if(final_damage_amount(collide_with, collide_with.attack_damage) >= flinch_threshold, cause_flinch(collide_with)))",
},

#ANIMATION HANDLES#
on_create: "[animation('stand'), set_up_gui()]",
on_end_stand_anim: "animation('stand')",
on_collide_feet: "if(animation not in ['hurt'], animation('stand'))",

# -- stuff that is related to the player's input follows
on_process: "[if((ctrl_left or ctrl_right) and animation = 'stand', set(animation, 'run')),
			if(ctrl_left, [
						if(can_turn, turn(left)),
						if(is_standing, add(velocity_x, -runspeed), add(velocity_x, -airspeed))]),
			if(ctrl_right, [
						if(can_turn, turn(right)),
						if(is_standing, add(velocity_x, runspeed), add(velocity_x, airspeed))]),
#			if(grounded_anim and (not is_standing), animation('beginFall')),#
			]",
			
on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",
on_end_run_anim: "animation('run')",
on_end_hurt_anim: "animation('beginFall')",

# -- Jumping and falling -- #
on_ctrl_jump: "if(is_standing and grounded_anim,
				[animation('jump'), add(velocity_y, jump_power)]
				)",
				
on_process_jump: "if(not ctrl_jump, [
				if(velocity_y < 0, set(velocity_y, -200)),
				animation('beginFall')],
				
				velocity_y >= 0, animation('beginFall'),
				
				add(velocity_y, -30)
				)",
				
on_end_beginFall_anim: "[animation('fall')]",

on_ctrl_up: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),
			speech_dialog(level.player,
		[~No info for you!~],
		))",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "characters/ember.png",
		rect: [3, 3, 25, 33],
		solid_area: [1,1,18,29],
		frames: 5,
		frames_per_row: 8,
		pad: 3,
		duration: 6,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "characters/ember.png",
		rect: [3, 3, 22, 33],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "jump",
		body_area: "all",		
		image: "characters/ember.png",
		rect: [3, 3, 22, 33],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "beginFall",
		body_area: "all",
		image: "characters/ember.png",
		rect: [3, 3, 22, 33],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 5,
		accel_y: 50,
		accel_x: 0,
	},
	
	{
		id: "fall",
		body_area: "all",				
		image: "characters/ember.png",
		rect: [3, 3, 22, 33],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
		accel_y: 80,
		accel_x: 0,
	},
	
	{
		id: "hurt",
		image: "pivot/pivot_basic.png",
		rect: [140, 38, 160, 69],
		solid_area: [2,5,17,30],
		frames: 1,
		duration: 18
	}
],

}
